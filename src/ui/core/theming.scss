@use 'sass:color';
@use 'sass:map';
@use 'sass:math';
@use 'theming.utils' as *;
@use 'over-color.utils' as *;

@mixin palette-classes($name) {

    .outline-#{$name},
    .outline-#{$name}-hoverable,
    .surface-#{$name},
    .surface-#{$name}-hoverable {
        border: 1px solid var(--subtle-#{$name}-border);
    }

    .outline-#{$name}-hoverable,
    .surface-#{$name}-hoverable {
        &:hover {
            border-color: var(--subtle-#{$name}-border-hover);
        }
    }


    .outline-#{$name},
    .outline-#{$name}-hoverable,
    .ghost-#{$name}-hoverable {
        color: var(--#{$name}-text-over-subtle);
    }

    .subtle-#{$name},
    .subtle-#{$name}-hoverable,
    .surface-#{$name},
    .surface-#{$name}-hoverable {
        background-color: var(--subtle-#{$name}-background);
        color: var(--#{$name}-text-over-subtle);
    }

    .subtle-#{$name}-hoverable,
    .surface-#{$name}-hoverable {
        &:hover {
            background-color: var(--subtle-#{$name}-background-hover);
            color: var(--#{$name}-text-over-subtle);
        }
    }

    .solid-#{$name},
    .solid-#{$name}-hoverable {
        background-color: var(--#{$name});
        color: var(--#{$name}-text-over-solid);
    }

    .solid-#{$name}-hoverable {
        &:hover {
            background-color: var(--#{$name}-hover);
            color: var(--#{$name}-text-over-solid);
        }
    }

    .ghost-#{$name}-hoverable {
        &:hover {
            background-color: var(--subtle-#{$name}-background);
            color: var(--#{$name}-text-over-subtle);
        }
    }
}

@mixin generate-palette($theme-colors, $foreground, $background, $options: ()) {
    $default-options: (
        'tinted': false,
        'subtle-bg-weight': 15%,
        'subtle-bg-hover-weight': 30%,
        'subtle-border-weight': 30%,
        'subtle-border-hover-weight': 60%,
        'hover-lightness': -10%,
        'force-light-text-threshold': 60%,
        'tint-lightness-adjustment': 0%
    );

$options: map.merge($default-options, $options);

@each $name, $color in $theme-colors {
    $subtle-bg: color.mix($color, $background, $weight: calculate-mix-weight($color, map.get($options, 'subtle-bg-weight')));

    --#{$name}: #{$color};
    --#{$name}-hover: #{color.adjust($color, $lightness: map.get($options, 'hover-lightness'))};
    --subtle-#{$name}-background: #{$subtle-bg};
    --subtle-#{$name}-background-hover: #{color.mix($color, $background, $weight: calculate-mix-weight($color, map.get($options, 'subtle-bg-hover-weight')))};
    --subtle-#{$name}-border: #{color.mix($color, $background, $weight: calculate-mix-weight($color, map.get($options, 'subtle-border-weight')))};
    --subtle-#{$name}-border-hover: #{color.mix($color, $background, $weight: calculate-mix-weight($color, map.get($options, 'subtle-border-hover-weight')))};
    --#{$name}-text-over-subtle: #{compute-over-color($subtle-bg, $background, $foreground, $options)};
    --#{$name}-text-over-plain: var(--foreground);
    --#{$name}-text-over-solid: #{if(color.channel($color, "lightness", $space: hsl) <= map.get($options, 'force-light-text-threshold'), var(--light), get-contrast-color($color))};

    @include palette-classes($name);
}

--background: #{$background};
--foreground: #{$foreground};

.stack-vertical {
    display: flex;
    flex-direction: column;
}

.stack-horizontal {
    display: flex;
    flex-direction: row;
}
}